# Generated by Django 4.2.20 on 2025-06-10 03:55

from django.db import migrations, models
import django.db.models.deletion
import testplans.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('projects', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='UploadFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='上传文件', upload_to=testplans.models.upload_file_path, verbose_name='上传文件')),
                ('info', models.JSONField(default=list, help_text='文件描述', verbose_name='文件描述')),
                ('upload_path', models.CharField(blank=True, default='', help_text='上传路径', max_length=255, verbose_name='上传路径')),
            ],
            options={
                'verbose_name': '上传文件表',
                'verbose_name_plural': '上传文件表',
                'db_table': 'tb_upload_file',
            },
        ),
        migrations.CreateModel(
            name='TestStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='用例标题', max_length=50, verbose_name='用例标题')),
                ('headers', models.JSONField(blank=True, default=dict, help_text='请求头', verbose_name='请求头')),
                ('request', models.JSONField(blank=True, default=dict, help_text='请求信息', verbose_name='请求信息')),
                ('file', models.JSONField(blank=True, default=list, help_text='上传的文件参数', verbose_name='上传的文件参数')),
                ('setup_script', models.TextField(blank=True, default='# 前置脚本(python):\n# global_tools : 全局工具函数\n# data : 用例数据 \n# env : 局部环境\n# ENV : 全局环境\n# db : 数据库操作对象\n', help_text='前置脚本', verbose_name='前置脚本')),
                ('teardown_script', models.TextField(blank=True, default='# 后置脚本(python):\n# global_tools : 全局工具函数\n# data : 用例数据 \n# response : 响应对象response\n# env : 局部环境\n# ENV : 全局环境\n# db : 数据库操作对象\n', help_text='后置脚本', verbose_name='后置脚本')),
                ('interface', models.ForeignKey(help_text='所属接口', on_delete=django.db.models.deletion.CASCADE, to='projects.interface', verbose_name='所属接口')),
            ],
            options={
                'verbose_name': '测试步骤表',
                'verbose_name_plural': '测试步骤表',
                'db_table': 'tb_test_step',
            },
        ),
        migrations.CreateModel(
            name='TestScene',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='测试场景名称', max_length=50, verbose_name='测试场景名称')),
                ('project', models.ForeignKey(help_text='所属项目', on_delete=django.db.models.deletion.PROTECT, related_name='test_scenes', to='projects.project', verbose_name='项目名称')),
            ],
            options={
                'verbose_name': '测试场景表',
                'verbose_name_plural': '测试场景表',
                'db_table': 'tb_test_scenes',
            },
        ),
        migrations.CreateModel(
            name='TestPlans',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='创建时间', verbose_name='创建时间')),
                ('name', models.CharField(help_text='测试计划名称', max_length=50, verbose_name='测试计划名称')),
                ('project', models.ForeignKey(help_text='所属项目id', on_delete=django.db.models.deletion.CASCADE, related_name='test_plans', to='projects.project', verbose_name='所属项目id')),
                ('scenes', models.ManyToManyField(blank=True, help_text='包含的关联场景', related_name='testplan', to='testplans.testscene', verbose_name='包含的关联场景')),
            ],
            options={
                'verbose_name': '测试计划表',
                'verbose_name_plural': '测试计划表',
                'db_table': 'tb_test_plans',
                'ordering': ['-create_time'],
            },
        ),
        migrations.CreateModel(
            name='SceneData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort', models.IntegerField(blank=True, help_text='执行排序', verbose_name='执行排序')),
                ('scene', models.ForeignKey(help_text='所属场景', on_delete=django.db.models.deletion.PROTECT, related_name='scenedata_set', to='testplans.testscene', verbose_name='所属场景')),
                ('step', models.ForeignKey(help_text='步骤', on_delete=django.db.models.deletion.PROTECT, to='testplans.teststep', verbose_name='步骤')),
            ],
            options={
                'verbose_name': '测试场景步骤',
                'verbose_name_plural': '测试场景步骤',
                'db_table': 'tb_scene_data',
            },
        ),
        migrations.CreateModel(
            name='CrontabTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='创建时间', verbose_name='创建时间')),
                ('name', models.CharField(help_text='任务名称', max_length=50, unique=True, verbose_name='任务名称')),
                ('rule', models.CharField(default='* * * * *', help_text='定时执行规则', max_length=50, verbose_name='定时执行规则')),
                ('status', models.BooleanField(default=False, help_text='任务状态', verbose_name='任务状态')),
                ('tester', models.CharField(blank=True, help_text='测试人员', max_length=50, verbose_name='测试人员')),
                ('env', models.ForeignKey(help_text='关联环境', on_delete=django.db.models.deletion.PROTECT, to='projects.testenv', verbose_name='关联环境')),
                ('plan', models.ForeignKey(help_text='关联计划', on_delete=django.db.models.deletion.PROTECT, to='testplans.testplans', verbose_name='关联计划')),
                ('project', models.ForeignKey(help_text='所属项目', on_delete=django.db.models.deletion.CASCADE, related_name='crontab_jobs', to='projects.project', verbose_name='项目名称')),
            ],
            options={
                'verbose_name': '定时任务表',
                'verbose_name_plural': '定时任务表',
                'db_table': 'tb_crontab_job',
            },
        ),
    ]
